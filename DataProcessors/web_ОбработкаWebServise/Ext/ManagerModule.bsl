//
//
Функция ВернутьДанныеОтчетаПоКоду(Код, ДокументРезультат,URLЗапрос) Экспорт
	ОбработкаОтчет = Справочники.ВнешниеОбработки.НайтиПоКоду(Код);
	Если не ОбработкаОтчет.Пустая() тогда
		ЭтоОтчет = истина;
		Если  ОбработкаОтчет.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет тогда
			МенеджерЗапуска = ВнешниеОтчеты;
		Иначе
			ЭтоОтчет = ложь;
			МенеджерЗапуска = ВнешниеОбработки;
		КонецЕсли;
		ИмяОтчета = Код;
		НавССылка = ПолучитьНавигационнуюСсылку(ОбработкаОтчет, "ХранилищеВнешнейОбработки");
		
		РежимБезопастности = БезопасныйРежим();
		
		Попытка
			ИмяОтчета = МенеджерЗапуска.Подключить(НавССылка,ИмяОтчета,РежимБезопастности);
			addLog("Создана обработка: " + ИмяОтчета);
		Исключение
			addLog("Неудача создании обработки '" + ИмяОтчета+ "' по причине:" + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) );
			Возврат Обработки.web_ОбработкаWebServise;
		КонецПопытки;
		
		ВнешнийПодключенныйОтчет = МенеджерЗапуска.Создать(ИмяОтчета, РежимБезопастности);
		
		Если ЭтоОтчет тогда
			СхемаКомпоновкиДанных = ВнешнийПодключенныйОтчет.СхемаКомпоновкиДанных;
			КомпоновщикНастроек1 = ВнешнийПодключенныйОтчет.КомпоновщикНастроек;
			Настройки = КомпоновщикНастроек1.ПолучитьНастройки();
			
			Если не URLЗапрос.ПараметрыURL.Количество() = 0 тогда 
				Для Каждого параметр из URLЗапрос.ПараметрыЗапроса Цикл
					ПараметрКомпановки = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(параметр.Ключ));
					Если не ПараметрКомпановки = Неопределено тогда
						ПараметрКомпановки.Значение = ВернутьЗначение(ТИпЗнч(ПараметрКомпановки.Значение), параметр.Значение);
						ПараметрКомпановки.Использование = истина;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;	
			
			ДанныеРасшифровки = Неопределено;	
			СкомпоноватьСхемуКомпановкиДанных(ДанныеРасшифровки, ДокументРезультат, Настройки, СхемаКомпоновкиДанных);
			Возврат Обработки.web_ОбработкаWebServise;
		Иначе
			ДокументРезультат = ВнешнийПодключенныйОтчет.Инициализировать(URLЗапрос.ПараметрыЗапроса);
			Возврат ДокументРезультат;
		КонецЕсли;	
		
	КонецЕсли;
	Возврат Обработки.web_ОбработкаWebServise;
КонецФункции

Функция ВернутьЗначение(Тип, Значение)
	Соответствие = новый Соответствие;
	Соответствие.Вставить(Тип("СтандартнаяДатаНачала"),Тип("Дата"));
	
	ТипXML = Соответствие.Получить(Тип);
	Если ТипXML = Неопределено Тогда
		ТипXML = Тип;
	КонецЕсли;	
	Попытка
		Возврат XMLЗначение(ТипXML, Значение);
	Исключение
		Возврат Значение;
	КонецПопытки;
КонецФункции	

Функция СкомпоноватьСхемуКомпановкиДанных(ДанныеРасшифровки, ДокументРезультат, Настройки, Знач СхемаКомпоновкиДанных)
	Результат = "";
	Если ТипЗнч(ДокументРезультат) = Тип("ТабличныйДокумент") тогда
		ТипГенератора = Тип("ГенераторМакетаКомпоновкиДанных");
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	Иначе
		ТипГенератора = Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений");
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(ДокументРезультат);
	КонецЕсли;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Попытка
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки,,ТипГенератора);
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
		Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
	Исключение
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	Возврат Результат;
КонецФункции

Функция ТаблицаЗначений_в_xml(ТаблицаЗначений) Экспорт 
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку(,КодировкаТекста.ANSI);
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Root");
	Для А=0 По ТаблицаЗначений.Количество()-1 Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("item");
		Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
			ИмяАтрибута=Колонка.Имя;
			ЗначениеАтрибута=ТаблицаЗначений[А][Колонка.Имя];
			ЗаписьXML.ЗаписатьАтрибут(ИмяАтрибута,XMLСтрока(ЗначениеАтрибута));
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	РезультатВозврата = ЗаписьXML.Закрыть();
	Возврат РезультатВозврата;
КонецФункции

Функция addLog(TEXT, level = Неопределено) Экспорт
	Если level = Неопределено тогда
		level = УровеньЖурналаРегистрации.Информация
	КонецЕсли;
	TAG = "web_reports";
	ЗаписьЖурналаРегистрации(TAG,level,,,TEXT);
КонецФункции

Функция  ВернутьОбработкуОбъект(Код) Экспорт 
	ВнешнийПодключенныйОтчет = Неопределено;
	Попытка
		ОбработкаОтчет = Справочники.ВнешниеОбработки.НайтиПоКоду(Код);	
		Если не ОбработкаОтчет.Пустая() тогда
			Если  ОбработкаОтчет.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет тогда
				МенеджерЗапуска = ВнешниеОтчеты;
			Иначе
				Возврат ВнешнийПодключенныйОтчет;
			КонецЕсли;
			ИмяОтчета = МенеджерЗапуска.Подключить(ПолучитьНавигационнуюСсылку(ОбработкаОтчет, "ХранилищеВнешнейОбработки") );
			ВнешнийПодключенныйОтчет = МенеджерЗапуска.Создать(ИмяОтчета);
		КонецЕсли;
	Исключение
	КонецПопытки;
	Возврат ВнешнийПодключенныйОтчет;
КонецФункции	
